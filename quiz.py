import time
import random


def slow_print(text, delay=0.05):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()


def print_ascii_babaka():
    print(r"""
   /^ ^\
  / 0 0 \ 
  V\ Y /V
   / - \   /
  |    \  /
  || (__V
–≠—Ç–æ –±–∞–±–∞–∫–∞! –û–Ω–∞ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–æ–º –æ—Ç —Å—á–∞—Å—Ç—å—è –∏ –æ–¥–æ–±—Ä—è–µ—Ç —Ç–≤–æ–π –≤—ã–±–æ—Ä üê∂
""")


def print_ascii_moon():
    print(r"""
        ___---___                    
     .--         --.      
   ./   ()      .-. \.
  /   o    .   (   )  \
 / .            '-'    \ 
| ()    .  O         .  |     
\                       / 
 \    '._.'         )  /
  `--._____.-'-.___.-'
–≠—Ç–æ –ü–û–î–õ–ò–ù–ù–ò–ö –ª—É–Ω—ã (–Ω—É –∏ —á—Ç–æ, —á—Ç–æ —á—É—á—É—Ç –Ω–∞ –ø–æ–ø–∫—É —Å–º–∞—Ö–∏–≤–∞–µ—Ç)! üåï
""")


def print_ascii_sphynx():
    print(r"""
       |\___/|
     ==) ^Y^ (==
       \  ^  /
        )=*=(
       /     \
      |       |
     /| |   | |\
     \| |._.| |/
      '"'   '"'
–ü–æ—á—Ç–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π... –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Å—Ç–∏ üò∫
""")


def ask_question(question, correct_answers, ascii_fun=None):
    slow_print(f"\nüß† {question}")
    answer = input("üëâ –û—Ç–≤–µ—Ç: ").strip().lower()
    if answer in correct_answers:
        slow_print("‚úÖ –í–µ—Ä–Ω–æ! üéâ")
        if ascii_fun:
            ascii_fun()
        return True
    else:
        slow_print("‚ùå –ù–µ —Å–æ–≤—Å–µ–º... –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–∞–º—ã–π –ª—É—á—à–∏–π üíõ")
        time.sleep(1)
        return False


def space_mini_game():
    slow_print("\nüë®‚ÄçüöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ! –û—Ç–≥–∞–¥–∞–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∫–µ—Ç—ã üöÄ")
    secret_number = random.randint(1, 5)
    tries = 3
    while tries > 0:
        try:
            guess = int(input(f"üî¢ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 ({tries} –ø–æ–ø—ã—Ç–æ–∫): "))
            if guess == secret_number:
                slow_print("üåü –£–†–ê! –†–∞–∫–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞! –¢—ã –ø—Ä–æ—à—ë–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –≤–µ—á–Ω—ã–º!")
                return True
            else:
                slow_print("‚ùå –ù–µ —Ç–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
                tries -= 1
        except ValueError:
            slow_print("üòÖ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!")
    slow_print("üöÄ –†–∞–∫–µ—Ç–∞ —É–ª–µ—Ç–µ–ª–∞ –±–µ–∑ —Ç–µ–±—è‚Ä¶ –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–π –≥–µ—Ä–æ–π!")
    return False


def final_letter(score, total):
    slow_print("\nüìú –õ–∏—á–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç —Ç–≤–æ–µ–π –¥–µ–≤–æ—á–∫–∏:\n")
    time.sleep(1)
    slow_print(f"–¢—ã –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç –ø—É—Ç—å, –Ω–∞–±—Ä–∞–≤ {score} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")

    if score == total:
        slow_print("üåü –¢—ã –∏–¥–µ–∞–ª–µ–Ω! –ü—Ä–æ—Å—Ç–æ GENIUS")
    elif score >= total - 1:
        slow_print("üíñ –ü–æ—á—Ç–∏ –≤—Å—ë —É–≥–∞–¥–∞–ª! –¢—ã –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π!")
    elif score >= total // 2:
        slow_print("üòä –ü–æ–ª–æ–≤–∏–Ω—É –ø—Ä–æ—à—ë–ª! –≠—Ç–æ –¥–æ—Å—Ç–æ–π–Ω–æ –∑–≤–∞–Ω–∏—è –ó–∞—â–∏—Ç–Ω–∏–∫–∞ –ñ–∞–±–æ–∫ –∏ –£–ª–∏—Ç–æ–∫")
    else:
        slow_print("ü•∫ –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å—ë —É–≥–∞–¥–∞–ª, —è —Ç–µ–±—è –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–±–æ–∂–∞—é!")

    time.sleep(1.5)
    slow_print("\nüíå –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –≤—Å—ë, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, –∑–∞ —Ç–≤–æ—é –¥–æ–±—Ä–æ—Ç—É, —é–º–æ—Ä, –∑–∞–±–æ—Ç—É")
    slow_print("–¢—ã –º–æ–π –ø–æ–¥–ª–∏–Ω–Ω–∏–∫ –≤–æ –≤—Å–µ–π —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π!\n")
    slow_print("–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º—ã–π üíõ")

    time.sleep(2)
    slow_print("\nüê± –ê –≤–æ—Ç –∏ –æ–Ω ‚Äî –Ω–∞—à –±—É–¥—É—â–∏–π –ª—ã—Å—ã–π –¥—Ä—É–≥...")
    print_ascii_sphynx()


def start_quiz():
    slow_print("üéâ –ü—Ä–∏–≤–µ—Ç, –∏–º–µ–Ω–∏–Ω–Ω–∏–∫! –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å, –∏ —Ç–µ–±—è –∂–¥—ë—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ–π–¥—ë—à—å —Ç–æ–ª—å–∫–æ —Ç—ã!\n"
               "–í –ø–æ–ª–µ —Å –æ—Ç–≤–µ—Ç–æ–º —Ç—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º\n"
               "–Ø –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –≤–µ—Ä—é –≤ —Ç–µ–±—è, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!")
    time.sleep(1)

    questions = [
        {
            "question": "–í –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∫–æ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —è —É—Å–æ–º–Ω–∏–ª–∞—Å—å –Ω–∞ –Ω–∞—à–µ–º –ø–µ—Ä–≤–æ–º —Å–≤–∏–¥–∞–Ω–∏–∏?",
            "answers": ["–õ—É–Ω–∞", "–ª—É–Ω–∞", "–≤ –ª—É–Ω–µ", "–í –ª—É–Ω–µ"],
            "ascii": print_ascii_moon
        },
        {
            "question": "–ö–∞–∫ —Ç—ã –Ω–∞–∑—ã–≤–∞–µ—à—å —Å–æ–±–∞–∫?",
            "answers": ["–±–∞–±–∞–∫–∏", "–ë–∞–±–∞–∫–∏", "–ë–∞–±–∞–∫–∞", "–±–∞–±–∞–∫–∞"],
            "ascii": print_ascii_babaka
        },
        {
            "question": "–î–æ–ø–æ–ª–Ω–∏ –∏–º—è: –í–∞—Ä—è... (–ø–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–µ–∑–¥–∫–∞ –≤ –ú—ã—Ç–∏—â–∏, —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞, –¥—è–¥—è —Å –ø–ª–∞–∫–∞—Ç–∞)",
            "answers": ["–≤–∞–ª—è", "–í–∞–ª—è"],
        },
        {
            "question": "–° —á–µ–º —Ç–∞–∫–∏–º —É–ª—å—Ç—Ä–∞ –≤–∫—É—Å–Ω–µ–Ω—å–∫–∏–º –∏ —Å–ª–∞–¥–∫–∏–º –º—ã –µ–ª–∏ –ø–∏—Ü—Ü–∫—É –∏ —Ö–∞—á–∞–ø—É—Ä–∏?",
            "answers": ["–≥—Ä—É—à–∞", "–ì—Ä—É—à–∞", "—Å –≥—Ä—É—à–µ–π", "–° –≥—Ä—É—à–µ–π"],
        },
        {
            "question": "–ù–∞ –∫–∞–∫–æ–º –º–æ–ª–æ–∫–µ —Ç—ã –æ–¥–Ω–∞–∂–¥—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –Ω–∞–º –∫–∞—à—É? (–í–≤–µ–¥–∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ö–∞–∫–æ–µ?')",
            "answers": ["–º–∏–Ω–¥–∞–ª—å–Ω–æ–µ", "–ú–∏–Ω–¥–∞–ª—å–Ω–æ–µ"],
        },
        {
            "question": "–° —á–µ–º —Ç—ã –æ–¥–Ω–∞–∂–¥—ã –ø—Ä—ã–≥–Ω—É–ª, –±–µ–∑ —á–µ–≥–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ª–µ—Ç–µ—Ç—å —Å —Ç–∞–∫–æ–π –≤—ã—Å–æ—Ç—ã?",
            "answers": ["–ø—Ä—ã–≥–Ω—É–ª —Å –ø–∞—Ä–∞—à—é—Ç–æ–º", "–ø—Ä—ã–∂–æ–∫ —Å –ø–∞—Ä–∞—à—é—Ç–æ–º", "—Å –ø–∞—Ä–∞—à—é—Ç–æ–º", "–° –ø–∞—Ä–∞—à—é—Ç–æ–º", "–ø–∞—Ä–∞—à—é—Ç", "–ü–∞—Ä–∞—à—é—Ç"],
        },
        {
            "question": "–° —á–µ–≥–æ –ö—Å—é—à–∫–∞ –ø—Ä–æ—Å—Ç–æ '–û–±–æ–∂–∞–µ—Ç' –ø–∞–¥–∞—Ç—å –ø—Ä—è–º–æ –Ω–∞ –Ω–æ–≥—É?",
            "answers": ["—Å –¥–µ—Ä–µ–≤–∞", "–° –¥–µ—Ä–µ–≤–∞", "–¥–µ—Ä–µ–≤–æ", "–î–µ—Ä–µ–≤–æ"],
        },
    ]

    score = 0
    for q in questions:
        if ask_question(q["question"], q["answers"], q.get("ascii")):
            score += 1

    if space_mini_game():
        score += 1
    total_questions = len(questions) + 1

    final_letter(score, total_questions)


if __name__ == "__main__":
    start_quiz()
